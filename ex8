from abc import ABC, abstractmethod

class Escola(ABC):
     _init_(self, nome, endereco):
        self.__nome = nome  # Atributo privado
        self.__endereco = endereco  # Atributo privado

     get_nome(self):
        return self.__nome

     set_nome(self, nome):
        self.__nome = nome

     get_endereco(self):
        return self.__endereco

     set_endereco(self, endereco):
        self.__endereco = endereco

    @abstractmethod
     calcularMensalidade(self):
        pass
class Curso(Escola):
     _init_(self, nome, endereco, cargaHoraria):
        super()._init_(nome, endereco)
        self.__cargaHoraria = cargaHoraria  
        
     get_cargaHoraria(self):
        return self.__cargaHoraria

     set_cargaHoraria(self, cargaHoraria):
        if cargaHoraria > 0:
            self.__cargaHoraria = cargaHoraria
        else:
            print("Erro: A carga horária deve ser maior que zero!")
   
     calcularMensalidade(self):
        return 500
class CursoTecnico(Curso):
     _init_(self, nome, endereco, cargaHoraria, modalidade):
        super()._init_(nome, endereco, cargaHoraria)
        self.__modalidade = modalidade  

     get_modalidade(self):
        return self.__modalidade

     set_modalidade(self, modalidade):
        self.__modalidade = modalidade

     calcularMensalidade(self):
        mensalidade_base = super().calcularMensalidade()  
        acréscimo = (self.get_cargaHoraria() // 10) * 50
        return mensalidade_base + acréscimo
